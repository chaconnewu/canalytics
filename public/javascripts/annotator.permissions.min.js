/*
** Annotator 1.2.5-dev-b83d51d
** https://github.com/okfn/annotator/
**
** Copyright 2012 Aron Carroll, Rufus Pollock, and Nick Stenning.
** Dual licensed under the MIT and GPLv3 licenses.
** https://github.com/okfn/annotator/blob/master/LICENSE
**
** Built at: 2012-12-04 05:16:10Z
*/(function(){var e=function(e,t){return function(){return e.apply(t,arguments)}},t={}.hasOwnProperty,n=function(e,n){function i(){this.constructor=e}for(var r in n)t.call(n,r)&&(e[r]=n[r]);return i.prototype=n.prototype,e.prototype=new i,e.__super__=n.prototype,e};Annotator.Plugin.Permissions=function(t){function r(t,n){this._setAuthFromToken=e(this._setAuthFromToken,this),this.updateViewer=e(this.updateViewer,this),this.updateAnnotationPermissions=e(this.updateAnnotationPermissions,this),this.updatePermissionsField=e(this.updatePermissionsField,this),this.addFieldsToAnnotation=e(this.addFieldsToAnnotation,this),r.__super__.constructor.apply(this,arguments),this.options.user&&(this.setUser(this.options.user),delete this.options.user)}return n(r,t),r.prototype.events={beforeAnnotationCreated:"addFieldsToAnnotation"},r.prototype.options={showViewPermissionsCheckbox:!0,showEditPermissionsCheckbox:!0,userId:function(e){return e},userString:function(e){return e},userAuthorize:function(e,t,n){var r,i,s,o;if(t.permissions){i=t.permissions[e]||[];if(i.length===0)return!0;for(s=0,o=i.length;s<o;s++){r=i[s];if(this.userId(n)===r)return!0}return!1}return t.user?n&&this.userId(n)===this.userId(t.user):!0},user:"",permissions:{read:[],update:[],"delete":[],admin:[]}},r.prototype.pluginInit=function(){var e,t,n=this;if(!Annotator.supported())return;t=this,e=function(e,n){return function(r,i){return t[e].call(t,n,r,i)}},!this.user&&this.annotator.plugins.Auth&&this.annotator.plugins.Auth.withToken(this._setAuthFromToken),this.options.showViewPermissionsCheckbox===!0&&this.annotator.editor.addField({type:"checkbox",label:Annotator._t("Allow anyone to <strong>view</strong> this annotation"),load:e("updatePermissionsField","read"),submit:e("updateAnnotationPermissions","read")}),this.options.showEditPermissionsCheckbox===!0&&this.annotator.editor.addField({type:"checkbox",label:Annotator._t("Allow anyone to <strong>edit</strong> this annotation"),load:e("updatePermissionsField","update"),submit:e("updateAnnotationPermissions","update")}),this.annotator.viewer.addField({load:this.updateViewer});if(this.annotator.plugins.Filter)return this.annotator.plugins.Filter.addFilter({label:Annotator._t("User"),property:"user",isFiltered:function(e,t){var r,i,s,o;t=n.options.userString(t);if(!e||!t)return!1;o=e.split(/\s*/);for(i=0,s=o.length;i<s;i++){r=o[i];if(t.indexOf(r)===-1)return!1}return!0}})},r.prototype.setUser=function(e){return this.user=e},r.prototype.addFieldsToAnnotation=function(e){if(e){e.permissions=this.options.permissions;if(this.user)return e.user=this.user}},r.prototype.authorize=function(e,t,n){return n===void 0&&(n=this.user),this.options.userAuthorize?this.options.userAuthorize.call(this.options,e,t,n):!0},r.prototype.updatePermissionsField=function(e,t,n){var r;return t=$(t).show(),r=t.find("input").removeAttr("disabled"),this.authorize("admin",n)||t.hide(),this.authorize(e,n||{},null)?r.attr("checked","checked"):r.removeAttr("checked")},r.prototype.updateAnnotationPermissions=function(e,t,n){var r;return n.permissions||(n.permissions=this.options.permissions),r=e+"-permissions",$(t).find("input").is(":checked")?n.permissions[e]=[]:n.permissions[e]=[this.user]},r.prototype.updateViewer=function(e,t,n){var r,i;e=$(e),i=this.options.userString(t.user),t.user&&i&&typeof i=="string"?(r=Annotator.$.escape(this.options.userString(t.user)),e.html(r).addClass("annotator-user")):e.remove(),this.authorize("update",t)||n.hideEdit();if(!this.authorize("delete",t))return n.hideDelete()},r.prototype._setAuthFromToken=function(e){return this.setUser(e.userId)},r}(Annotator.Plugin)}).call(this);